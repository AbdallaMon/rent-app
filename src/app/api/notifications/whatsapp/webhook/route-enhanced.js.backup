import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { sendInteractiveWhatsAppMessage, sendWhatsAppMessage } from '@/lib/whatsapp';

let prisma;

function getPrismaClient() {
  if (!prisma) {
    prisma = new PrismaClient();
  }
  return prisma;
}

// Store user sessions and conversation state
const userSessions = new Map();
const processedWebhookIds = new Set();

// Enhanced message templates with better structured options
const enhancedMessages = {
  welcomeMessage: {
    ar: "مرحباً بك! كيف يمكننا مساعدتك اليوم؟",
    en: "Welcome! How can we help you today?"
  },
  mainMenuOptions: {
    ar: {
      header: "خدمات العملاء",
      body: "يرجى اختيار الخدمة التي تحتاجها:",
      footer: "نحن هنا لخدمتك 24/7",
      button: "اختر الخدمة",
      sections: [
        {
          title: "الخدمات المتاحة",
          rows: [
            {
              id: "maintenance_request",
              title: "🔧 طلب صيانة",
              description: "الإبلاغ عن مشكلة في العقار أو الوحدة"
            },
            {
              id: "submit_complaint", 
              title: "📝 تقديم شكوى",
              description: "تقديم شكوى أو اقتراح للتحسين"
            },
            {
              id: "check_status",
              title: "📊 حالة الطلبات",
              description: "متابعة حالة طلباتك السابقة"
            },
            {
              id: "contact_support",
              title: "☎️ الاتصال بالدعم",
              description: "التحدث مع ممثل خدمة العملاء"
            }
          ]
        }
      ]
    },
    en: {
      header: "Customer Services",
      body: "Please select the service you need:",
      footer: "We're here to serve you 24/7",
      button: "Select Service",
      sections: [
        {
          title: "Available Services",
          rows: [
            {
              id: "maintenance_request",
              title: "🔧 Maintenance Request",
              description: "Report an issue with your property or unit"
            },
            {
              id: "submit_complaint",
              title: "📝 Submit Complaint", 
              description: "Submit a complaint or suggestion"
            },
            {
              id: "check_status",
              title: "📊 Check Status",
              description: "Track your previous requests"
            },
            {
              id: "contact_support",
              title: "☎️ Contact Support",
              description: "Speak with customer service"
            }
          ]
        }
      ]
    }
  },
  
  // Maintenance request flow
  maintenanceTypeOptions: {
    ar: {
      header: "نوع طلب الصيانة",
      body: "ما نوع المشكلة التي تواجهها؟",
      footer: "اختر النوع الأقرب لمشكلتك",
      button: "اختر النوع",
      sections: [
        {
          title: "أنواع الصيانة",
          rows: [
            {
              id: "plumbing",
              title: "🚿 سباكة",
              description: "مشاكل المياه والصرف الصحي"
            },
            {
              id: "electrical",
              title: "⚡ كهرباء",
              description: "مشاكل الكهرباء والإضاءة"
            },
            {
              id: "ac_heating",
              title: "❄️ تكييف وتدفئة",
              description: "مشاكل التكييف والتدفئة"
            },
            {
              id: "appliances",
              title: "🏠 أجهزة منزلية",
              description: "مشاكل الأجهزة المنزلية"
            },
            {
              id: "structural",
              title: "🏗️ إنشائية",
              description: "مشاكل الأبواب والنوافذ والجدران"
            },
            {
              id: "other_maintenance",
              title: "🔧 أخرى",
              description: "مشاكل صيانة أخرى"
            }
          ]
        }
      ]
    },
    en: {
      header: "Maintenance Request Type",
      body: "What type of issue are you experiencing?",
      footer: "Choose the type closest to your issue",
      button: "Select Type",
      sections: [
        {
          title: "Maintenance Types",
          rows: [
            {
              id: "plumbing",
              title: "🚿 Plumbing",
              description: "Water and drainage issues"
            },
            {
              id: "electrical",
              title: "⚡ Electrical",
              description: "Electrical and lighting issues"
            },
            {
              id: "ac_heating",
              title: "❄️ AC & Heating",
              description: "Air conditioning and heating issues"
            },
            {
              id: "appliances",
              title: "🏠 Appliances",
              description: "Home appliance issues"
            },
            {
              id: "structural",
              title: "🏗️ Structural",
              description: "Doors, windows, and wall issues"
            },
            {
              id: "other_maintenance",
              title: "🔧 Other",
              description: "Other maintenance issues"
            }
          ]
        }
      ]
    }
  },

  // Priority selection
  priorityOptions: {
    ar: {
      header: "أولوية الطلب",
      body: "ما مدى إلحاح هذه المشكلة؟",
      footer: "سيساعدنا هذا في تحديد أولوية الاستجابة",
      button: "اختر الأولوية",
      sections: [
        {
          title: "مستويات الأولوية",
          rows: [
            {
              id: "urgent",
              title: "🔴 عاجل",
              description: "مشكلة طارئة تحتاج حل فوري"
            },
            {
              id: "high",
              title: "🟠 عالية",
              description: "مشكلة مهمة تحتاج حل سريع"
            },
            {
              id: "medium",
              title: "🟡 متوسطة",
              description: "مشكلة عادية يمكن حلها خلال أيام"
            },
            {
              id: "low",
              title: "🟢 منخفضة",
              description: "مشكلة بسيطة غير عاجلة"
            }
          ]
        }
      ]
    },
    en: {
      header: "Request Priority",
      body: "How urgent is this issue?",
      footer: "This helps us prioritize our response",
      button: "Select Priority",
      sections: [
        {
          title: "Priority Levels",
          rows: [
            {
              id: "urgent",
              title: "🔴 Urgent",
              description: "Emergency issue requiring immediate solution"
            },
            {
              id: "high",
              title: "🟠 High",
              description: "Important issue requiring quick solution"
            },
            {
              id: "medium",
              title: "🟡 Medium",
              description: "Normal issue that can be solved within days"
            },
            {
              id: "low",
              title: "🟢 Low",
              description: "Simple non-urgent issue"
            }
          ]
        }
      ]
    }
  },

  // Complaint categories
  complaintCategories: {
    ar: {
      header: "نوع الشكوى",
      body: "ما نوع الشكوى التي تريد تقديمها؟",
      footer: "اختر التصنيف المناسب",
      button: "اختر النوع",
      sections: [
        {
          title: "تصنيفات الشكاوى",
          rows: [
            {
              id: "property_issue",
              title: "🏠 مشكلة في العقار",
              description: "مشاكل متعلقة بالعقار نفسه"
            },
            {
              id: "rent_issue",
              title: "💰 مشكلة في الإيجار",
              description: "مشاكل متعلقة بالدفع أو الفواتير"
            },
            {
              id: "neighbor_issue",
              title: "👥 مشكلة مع الجيران",
              description: "مشاكل مع الجيران أو السكان"
            },
            {
              id: "maintenance_issue",
              title: "🔧 مشكلة في الصيانة",
              description: "شكوى حول خدمة الصيانة"
            },
            {
              id: "noise_issue",
              title: "🔊 مشكلة ضوضاء",
              description: "شكاوى متعلقة بالضوضاء"
            },
            {
              id: "security_issue",
              title: "🛡️ مشكلة أمنية",
              description: "مشاكل أمنية في المبنى"
            },
            {
              id: "payment_issue",
              title: "💳 مشكلة في الدفع",
              description: "مشاكل في عمليات الدفع"
            },
            {
              id: "other_complaint",
              title: "📝 أخرى",
              description: "شكوى أخرى غير مصنفة"
            }
          ]
        }
      ]
    },
    en: {
      header: "Complaint Type",
      body: "What type of complaint would you like to submit?",
      footer: "Choose the appropriate category",
      button: "Select Type",
      sections: [
        {
          title: "Complaint Categories",
          rows: [
            {
              id: "property_issue",
              title: "🏠 Property Issue",
              description: "Issues related to the property itself"
            },
            {
              id: "rent_issue",
              title: "💰 Rent Issue",
              description: "Issues related to payment or billing"
            },
            {
              id: "neighbor_issue",
              title: "👥 Neighbor Issue",
              description: "Issues with neighbors or residents"
            },
            {
              id: "maintenance_issue",
              title: "🔧 Maintenance Issue",
              description: "Complaints about maintenance service"
            },
            {
              id: "noise_issue",
              title: "🔊 Noise Issue",
              description: "Noise-related complaints"
            },
            {
              id: "security_issue",
              title: "🛡️ Security Issue",
              description: "Security issues in the building"
            },
            {
              id: "payment_issue",
              title: "💳 Payment Issue",
              description: "Payment processing issues"
            },
            {
              id: "other_complaint",
              title: "📝 Other",
              description: "Other unclassified complaint"
            }
          ]
        }
      ]
    }
  }
};

// Helper function to get localized messages
const getLocalizedMessages = (language, messageKey) => {
  const lang = language === 'ARABIC' ? 'ar' : 'en';
  return enhancedMessages[messageKey]?.[lang] || enhancedMessages[messageKey]?.en;
};

// Find client by phone number
const findClientByPhone = async (phoneNumber, prisma) => {
  try {
    const cleanPhone = phoneNumber.replace(/^\+966/, '0').replace(/^\+/, '');
    
    const client = await prisma.client.findFirst({
      where: {
        OR: [
          { phone: phoneNumber },
          { phone: cleanPhone },
          { phone: phoneNumber.replace(/^\+/, '') },
          { phone: `+966${cleanPhone.replace(/^0/, '')}` }
        ]
      }
    });
    
    return client;
  } catch (error) {
    console.error('Error finding client by phone:', error);
    return null;
  }
};

// Session management
const createSession = (phoneNumber, language) => {
  const session = {
    phoneNumber,
    language,
    step: 'main_menu',
    data: {},
    timestamp: Date.now()
  };
  userSessions.set(phoneNumber, session);
  return session;
};

const getSession = (phoneNumber) => {
  return userSessions.get(phoneNumber);
};

const updateSession = (phoneNumber, updates) => {
  const session = getSession(phoneNumber) || createSession(phoneNumber, 'ENGLISH');
  Object.assign(session, updates, { timestamp: Date.now() });
  userSessions.set(phoneNumber, session);
  return session;
};

// Enhanced main menu sender
const sendMainMenu = async (phoneNumber, language) => {
  try {
    const menuOptions = getLocalizedMessages(language, 'mainMenuOptions');
    
    const interactiveContent = {
      type: "list",
      header: {
        type: "text",
        text: menuOptions.header
      },
      body: {
        text: menuOptions.body
      },
      footer: {
        text: menuOptions.footer
      },
      action: {
        button: menuOptions.button,
        sections: menuOptions.sections
      }
    };
    
    await sendInteractiveWhatsAppMessage(phoneNumber, interactiveContent);
    updateSession(phoneNumber, { step: 'awaiting_main_menu_selection', language });
  } catch (error) {
    console.error('Error sending main menu:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Enhanced maintenance type selector
const sendMaintenanceTypeOptions = async (phoneNumber, language) => {
  try {
    const typeOptions = getLocalizedMessages(language, 'maintenanceTypeOptions');
    
    const interactiveContent = {
      type: "list",
      header: {
        type: "text",
        text: typeOptions.header
      },
      body: {
        text: typeOptions.body
      },
      footer: {
        text: typeOptions.footer
      },
      action: {
        button: typeOptions.button,
        sections: typeOptions.sections
      }
    };
    
    await sendInteractiveWhatsAppMessage(phoneNumber, interactiveContent);
    updateSession(phoneNumber, { step: 'awaiting_maintenance_type' });
  } catch (error) {
    console.error('Error sending maintenance type options:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Priority selector
const sendPriorityOptions = async (phoneNumber, language) => {
  try {
    const priorityOptions = getLocalizedMessages(language, 'priorityOptions');
    
    const interactiveContent = {
      type: "list",
      header: {
        type: "text",
        text: priorityOptions.header
      },
      body: {
        text: priorityOptions.body
      },
      footer: {
        text: priorityOptions.footer
      },
      action: {
        button: priorityOptions.button,
        sections: priorityOptions.sections
      }
    };
    
    await sendInteractiveWhatsAppMessage(phoneNumber, interactiveContent);
    updateSession(phoneNumber, { step: 'awaiting_priority_selection' });
  } catch (error) {
    console.error('Error sending priority options:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Complaint category selector
const sendComplaintCategories = async (phoneNumber, language) => {
  try {
    const categoryOptions = getLocalizedMessages(language, 'complaintCategories');
    
    const interactiveContent = {
      type: "list",
      header: {
        type: "text",
        text: categoryOptions.header
      },
      body: {
        text: categoryOptions.body
      },
      footer: {
        text: categoryOptions.footer
      },
      action: {
        button: categoryOptions.button,
        sections: categoryOptions.sections
      }
    };
    
    await sendInteractiveWhatsAppMessage(phoneNumber, interactiveContent);
    updateSession(phoneNumber, { step: 'awaiting_complaint_category' });
  } catch (error) {
    console.error('Error sending complaint categories:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Handle interactive responses with enhanced flow
const handleInteractiveResponse = async (interactive, phoneNumber, prisma) => {
  try {
    const session = getSession(phoneNumber) || createSession(phoneNumber, 'ENGLISH');
    const language = session.language;
    
    if (interactive.list_reply) {
      const selectedOption = interactive.list_reply.id;
      
      switch (session.step) {
        case 'awaiting_main_menu_selection':
          await handleMainMenuSelection(selectedOption, phoneNumber, language, prisma);
          break;
          
        case 'awaiting_maintenance_type':
          updateSession(phoneNumber, { 
            step: 'awaiting_priority_selection',
            data: { ...session.data, maintenanceType: selectedOption }
          });
          await sendPriorityOptions(phoneNumber, language);
          break;
          
        case 'awaiting_priority_selection':
          updateSession(phoneNumber, { 
            step: 'awaiting_description',
            data: { ...session.data, priority: selectedOption }
          });
          const promptMsg = language === 'ARABIC' ? 
            "يرجى وصف المشكلة بالتفصيل:" : 
            "Please describe the issue in detail:";
          await sendWhatsAppMessage(phoneNumber, promptMsg);
          break;
          
        case 'awaiting_complaint_category':
          updateSession(phoneNumber, { 
            step: 'awaiting_complaint_description',
            data: { ...session.data, category: selectedOption }
          });
          const complaintPrompt = language === 'ARABIC' ? 
            "يرجى وصف الشكوى بالتفصيل:" : 
            "Please describe your complaint in detail:";
          await sendWhatsAppMessage(phoneNumber, complaintPrompt);
          break;
      }
    }
  } catch (error) {
    console.error('Error handling interactive response:', error);
  }
};

// Handle main menu selection
const handleMainMenuSelection = async (selectedOption, phoneNumber, language, prisma) => {
  const client = await findClientByPhone(phoneNumber, prisma);
  
  if (!client) {
    const notFoundMsg = language === 'ARABIC' ? 
      "لم نتمكن من العثور على حسابك في نظامنا. يرجى الاتصال بمكتبنا مباشرة." :
      "We couldn't find your account in our system. Please contact our office directly.";
    await sendWhatsAppMessage(phoneNumber, notFoundMsg);
    return;
  }
  
  switch (selectedOption) {
    case 'maintenance_request':
      await sendMaintenanceTypeOptions(phoneNumber, language);
      break;
      
    case 'submit_complaint':
      await sendComplaintCategories(phoneNumber, language);
      break;
      
    case 'check_status':
      await handleStatusCheck(phoneNumber, language, client, prisma);
      break;
      
    case 'contact_support':
      await handleContactSupport(phoneNumber, language, client, prisma);
      break;
      
    default:
      await sendMainMenu(phoneNumber, language);
  }
};

// Enhanced maintenance request creation
const createEnhancedMaintenanceRequest = async (phoneNumber, description, session, prisma) => {
  try {
    const client = await findClientByPhone(phoneNumber, prisma);
    if (!client) return;
    
    const { maintenanceType, priority } = session.data;
    
    // Map priority values to database enum
    const priorityMap = {
      'urgent': 'URGENT',
      'high': 'HIGH', 
      'medium': 'MEDIUM',
      'low': 'LOW'
    };
    
    const clientProperties = await prisma.property.findMany({
      where: { clientId: client.id }
    });
    
    const clientUnits = await prisma.unit.findMany({
      where: { clientId: client.id }
    });
    
    const maintenanceRequest = await prisma.maintenanceRequest.create({
      data: {
        clientId: client.id,
        propertyId: clientProperties.length > 0 ? clientProperties[0].id : null,
        unitId: clientUnits.length > 0 ? clientUnits[0].id : null,
        description: `[${maintenanceType.toUpperCase()}] ${description}`,
        status: 'PENDING',
        priority: priorityMap[priority] || 'MEDIUM',
        isExpired: false,
        lastRequestTime: new Date()
      }
    });
    
    const successMsg = session.language === 'ARABIC' ? 
      `تم تقديم طلب الصيانة بنجاح!\n\nرقم الطلب: #${maintenanceRequest.id}\nالنوع: ${maintenanceType}\nالأولوية: ${priority}\nالوصف: ${description}\n\nسيقوم فريقنا بمراجعته قريباً.` :
      `Maintenance request submitted successfully!\n\nRequest #: ${maintenanceRequest.id}\nType: ${maintenanceType}\nPriority: ${priority}\nDescription: ${description}\n\nOur team will review it soon.`;
    
    await sendWhatsAppMessage(phoneNumber, successMsg);
    
    // Reset session
    userSessions.delete(phoneNumber);
    
  } catch (error) {
    console.error('Error creating enhanced maintenance request:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Enhanced complaint creation
const createEnhancedComplaint = async (phoneNumber, description, session, prisma) => {
  try {
    const client = await findClientByPhone(phoneNumber, prisma);
    if (!client) return;
    
    const { category } = session.data;
    
    // Map category values to database enum
    const categoryMap = {
      'property_issue': 'PROPERTY_ISSUE',
      'rent_issue': 'RENT_ISSUE',
      'neighbor_issue': 'NEIGHBOR_ISSUE',
      'maintenance_issue': 'MAINTENANCE_ISSUE',
      'noise_issue': 'NOISE_ISSUE',
      'security_issue': 'SECURITY_ISSUE',
      'payment_issue': 'PAYMENT_ISSUE',
      'other_complaint': 'OTHER'
    };
    
    const clientProperties = await prisma.property.findMany({
      where: { clientId: client.id }
    });
    
    const clientUnits = await prisma.unit.findMany({
      where: { clientId: client.id }
    });
    
    const complaint = await prisma.complaint.create({
      data: {
        clientId: client.id,
        propertyId: clientProperties.length > 0 ? clientProperties[0].id : null,
        unitId: clientUnits.length > 0 ? clientUnits[0].id : null,
        title: description.length > 50 ? description.substring(0, 50) + "..." : description,
        description: description,
        category: categoryMap[category] || 'OTHER',
        status: 'PENDING'
      }
    });
    
    const successMsg = session.language === 'ARABIC' ? 
      `تم تقديم الشكوى بنجاح!\n\nرقم الشكوى: #${complaint.id}\nالتصنيف: ${category}\nالوصف: ${description}\n\nسيقوم فريقنا بمراجعتها قريباً.` :
      `Complaint submitted successfully!\n\nComplaint #: ${complaint.id}\nCategory: ${category}\nDescription: ${description}\n\nOur team will review it soon.`;
    
    await sendWhatsAppMessage(phoneNumber, successMsg);
    
    // Reset session
    userSessions.delete(phoneNumber);
    
  } catch (error) {
    console.error('Error creating enhanced complaint:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Handle text messages based on session state
const handleTextMessage = async (messageText, phoneNumber, prisma) => {
  const session = getSession(phoneNumber);
  
  if (!session) {
    // No active session, start fresh
    const client = await findClientByPhone(phoneNumber, prisma);
    const language = client?.language || 'ENGLISH';
    await sendMainMenu(phoneNumber, language);
    return;
  }
  
  switch (session.step) {
    case 'awaiting_description':
      await createEnhancedMaintenanceRequest(phoneNumber, messageText, session, prisma);
      break;
      
    case 'awaiting_complaint_description':
      await createEnhancedComplaint(phoneNumber, messageText, session, prisma);
      break;
      
    default:
      // Unknown step, restart
      const client = await findClientByPhone(phoneNumber, prisma);
      const language = client?.language || session.language || 'ENGLISH';
      await sendMainMenu(phoneNumber, language);
  }
};

// Status check functionality
const handleStatusCheck = async (phoneNumber, language, client, prisma) => {
  try {
    // Get recent requests and complaints
    const recentRequests = await prisma.maintenanceRequest.findMany({
      where: { clientId: client.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });
    
    const recentComplaints = await prisma.complaint.findMany({
      where: { clientId: client.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });
    
    let statusMessage = language === 'ARABIC' ? 
      "حالة طلباتك الأخيرة:\n\n" : 
      "Your recent requests status:\n\n";
    
    if (recentRequests.length > 0) {
      statusMessage += language === 'ARABIC' ? "طلبات الصيانة:\n" : "Maintenance Requests:\n";
      recentRequests.forEach(req => {
        const statusText = language === 'ARABIC' ? 
          { PENDING: 'معلق', IN_PROGRESS: 'قيد المعالجة', COMPLETED: 'مكتمل', REJECTED: 'مرفوض' } :
          { PENDING: 'Pending', IN_PROGRESS: 'In Progress', COMPLETED: 'Completed', REJECTED: 'Rejected' };
        statusMessage += `#${req.id}: ${statusText[req.status]}\n`;
      });
      statusMessage += "\n";
    }
    
    if (recentComplaints.length > 0) {
      statusMessage += language === 'ARABIC' ? "الشكاوى:\n" : "Complaints:\n";
      recentComplaints.forEach(comp => {
        const statusText = language === 'ARABIC' ? 
          { PENDING: 'معلق', REVIEWING: 'قيد المراجعة', RESOLVED: 'محلول', REJECTED: 'مرفوض' } :
          { PENDING: 'Pending', REVIEWING: 'Reviewing', RESOLVED: 'Resolved', REJECTED: 'Rejected' };
        statusMessage += `#${comp.id}: ${statusText[comp.status]}\n`;
      });
    }
    
    if (recentRequests.length === 0 && recentComplaints.length === 0) {
      statusMessage = language === 'ARABIC' ? 
        "لا توجد طلبات سابقة." : 
        "No previous requests found.";
    }
    
    await sendWhatsAppMessage(phoneNumber, statusMessage);
    
    // Return to main menu
    setTimeout(() => {
      sendMainMenu(phoneNumber, language);
    }, 2000);
    
  } catch (error) {
    console.error('Error checking status:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Contact support
const handleContactSupport = async (phoneNumber, language, client, prisma) => {
  try {
    const supportMsg = language === 'ARABIC' ? 
      "تم إرسال طلبك للدعم الفني. سيتصل بك ممثل خدمة العملاء خلال 30 دقيقة." :
      "Your request has been sent to technical support. A customer service representative will contact you within 30 minutes.";
    
    await sendWhatsAppMessage(phoneNumber, supportMsg);
    
    // Log support request
    await prisma.contactForm.create({
      data: {
        name: client.name,
        email: client.email || 'noemail@provided.com',
        phone: phoneNumber,
        message: 'Customer requested support via WhatsApp bot',
        language: language
      }
    });
    
    // Return to main menu after 3 seconds
    setTimeout(() => {
      sendMainMenu(phoneNumber, language);
    }, 3000);
    
  } catch (error) {
    console.error('Error handling contact support:', error);
    await sendWhatsAppMessage(phoneNumber, "عذراً، حدث خطأ. / Sorry, an error occurred.");
  }
};

// Main webhook handler
export async function POST(request) {
  try {
    const body = await request.json();
    const prisma = getPrismaClient();
    
    if (body.entry && body.entry[0].changes && body.entry[0].changes[0].value.messages) {
      const message = body.entry[0].changes[0].value.messages[0];
      const phoneNumber = message.from;
      
      // Check for duplicate processing
      const webhookId = `${message.id}_${Date.now()}`;
      if (processedWebhookIds.has(webhookId)) {
        return NextResponse.json({ status: 'already_processed' });
      }
      processedWebhookIds.add(webhookId);
      
      // Handle different message types
      if (message.type === 'text') {
        await handleTextMessage(message.text.body, phoneNumber, prisma);
      } else if (message.type === 'interactive') {
        await handleInteractiveResponse(message.interactive, phoneNumber, prisma);
      }
    }
    
    return NextResponse.json({ status: 'success' });
    
  } catch (error) {
    console.error('Enhanced webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// Webhook verification
export async function GET(request) {
  const url = new URL(request.url);
  const mode = url.searchParams.get('hub.mode');
  const token = url.searchParams.get('hub.verify_token');
  const challenge = url.searchParams.get('hub.challenge');
  
  if (mode === 'subscribe' && token === process.env.WEBHOOK_VERIFY_TOKEN) {
    return new Response(challenge, { status: 200 });
  }
  
  return new Response('Forbidden', { status: 403 });
}
