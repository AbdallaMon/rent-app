// ูููู ูุฅุฏุงุฑุฉ ุชุญุฏูุซ ูุธุงู ุงูููุงุชูุฑ
'use client';

import React, { useState, useEffect } from 'react';
import {
    Box,
    Button,
    Card,
    CardContent,
    Typography,
    Alert,
    CircularProgress,
    List,
    ListItem,
    ListItemText,
    Divider,
    Grid,
    Chip
} from '@mui/material';
import {
    UpdateOutlined,
    CheckCircleOutlined,
    ErrorOutlined,
    InfoOutlined
} from '@mui/icons-material';

const InvoiceSystemManager = () => {
    const [loading, setLoading] = useState(false);
    const [updateResult, setUpdateResult] = useState(null);
    const [currentStats, setCurrentStats] = useState(null);
    const [statsLoading, setStatsLoading] = useState(true);

    // ุฌูุจ ุงูุฅุญุตุงุฆูุงุช ุงูุญุงููุฉ
    const fetchCurrentStats = async () => {
        setStatsLoading(true);
        try {
            const response = await fetch('/api/admin/update-invoice-system');
            const data = await response.json();
            setCurrentStats(data.currentStats);
        } catch (error) {
            console.error('ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช:', error);
        } finally {
            setStatsLoading(false);
        }
    };

    // ุชุดุบูู ุชุญุฏูุซ ุงููุธุงู
    const runSystemUpdate = async () => {
        setLoading(true);
        setUpdateResult(null);
        
        try {
            const response = await fetch('/api/admin/update-invoice-system', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const result = await response.json();
            setUpdateResult(result);
            
            if (result.success) {
                // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช ุจุนุฏ ุงููุฌุงุญ
                await fetchCurrentStats();
            }
        } catch (error) {
            setUpdateResult({
                success: false,
                error: 'ูุดู ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู',
                details: error.message
            });
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCurrentStats();
    }, []);

    return (
        <Box sx={{ p: 3, maxWidth: 1200, margin: '0 auto' }}>
            <Typography variant="h4" gutterBottom sx={{ textAlign: 'center', mb: 4 }}>
                ๐ง ุฅุฏุงุฑุฉ ุชุญุฏูุซ ูุธุงู ุงูููุงุชูุฑ
            </Typography>

            {/* ุงูุฅุญุตุงุฆูุงุช ุงูุญุงููุฉ */}
            <Card sx={{ mb: 3 }}>
                <CardContent>
                    <Typography variant="h6" gutterBottom>
                        ๐ ุงูุฅุญุตุงุฆูุงุช ุงูุญุงููุฉ
                    </Typography>
                    {statsLoading ? (
                        <CircularProgress size={24} />
                    ) : currentStats ? (
                        <Grid container spacing={2}>
                            <Grid item xs={12} sm={6} md={3}>
                                <Box sx={{ textAlign: 'center', p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                                    <Typography variant="h4" color="primary">
                                        {currentStats.rentInvoices}
                                    </Typography>
                                    <Typography variant="body2">ููุงุชูุฑ ุฅูุฌุงุฑ</Typography>
                                </Box>
                            </Grid>
                            <Grid item xs={12} sm={6} md={3}>
                                <Box sx={{ textAlign: 'center', p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                                    <Typography variant="h4" color="warning.main">
                                        {currentStats.taxInvoices}
                                    </Typography>
                                    <Typography variant="body2">ููุงุชูุฑ ุถุฑุงุฆุจ</Typography>
                                </Box>
                            </Grid>
                            <Grid item xs={12} sm={6} md={3}>
                                <Box sx={{ textAlign: 'center', p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                                    <Typography variant="h4" color="success.main">
                                        {currentStats.otherInvoices}
                                    </Typography>
                                    <Typography variant="body2">ููุงุชูุฑ ุฃุฎุฑู</Typography>
                                </Box>
                            </Grid>
                            <Grid item xs={12} sm={6} md={3}>
                                <Box sx={{ textAlign: 'center', p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                                    <Typography variant="h4" color="info.main">
                                        {currentStats.commissionRecords}
                                    </Typography>
                                    <Typography variant="body2">ุณุฌูุงุช ุนูููุฉ</Typography>
                                </Box>
                            </Grid>
                        </Grid>
                    ) : (
                        <Alert severity="error">ูุดู ูู ุชุญููู ุงูุฅุญุตุงุฆูุงุช</Alert>
                    )}
                </CardContent>
            </Card>

            {/* ุดุฑุญ ุงูุชุญุฏูุซ */}
            <Card sx={{ mb: 3 }}>
                <CardContent>
                    <Typography variant="h6" gutterBottom>
                        โน๏ธ ูุงุฐุง ุณูุญุฏุซ ุนูุฏ ุงูุชุญุฏูุซุ
                    </Typography>
                    <List dense>
                        <ListItem>
                            <ListItemText 
                                primary="1. ุฅุฒุงูุฉ ููุงุชูุฑ ุงูุฅูุฌุงุฑ ูุงูุถุฑุงุฆุจ ูู ูุธุงู ุงูููุงุชูุฑ"
                                secondary="ูู ุชุธูุฑ ูุฐู ุงูููุงุชูุฑ ูู ูุงุฆูุฉ ุงูููุงุชูุฑ ุงูุฑุฆูุณูุฉ"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemText 
                                primary="2. ุชุญููู ููู ูุฐู ุงูููุงุชูุฑ ุฅูู ุนูููุงุช ุฅุฏุงุฑุฉ"
                                secondary="ุณูุชู ุญุณุงุจ ุนูููุฉ ุงูุฅุฏุงุฑุฉ ุจูุงุกู ุนูู ูุณุจุฉ ุงูุนูููุฉ ุงููุญุฏุฏุฉ ูู ูู ุนูุงุฑ"
                            />
                        </ListItem>
                        <ListItem>
                            <ListItemText 
                                primary="3. ุชุณุฌูู ุนูููุงุช ุงูุฅุฏุงุฑุฉ ูุฏุฎู ูููุตู"
                                secondary="ุณุชุธูุฑ ุนูููุงุช ุงูุฅุฏุงุฑุฉ ูู ูุณู ุงูุฏุฎู ูุน ูุตู ูุงุถุญ"
                            />
                        </ListItem>
                    </List>
                </CardContent>
            </Card>

            {/* ุฒุฑ ุงูุชุญุฏูุซ */}
            <Box sx={{ textAlign: 'center', mb: 3 }}>
                <Button
                    variant="contained"
                    size="large"
                    startIcon={loading ? <CircularProgress size={20} /> : <UpdateOutlined />}
                    onClick={runSystemUpdate}
                    disabled={loading}
                    sx={{ minWidth: 200 }}
                >
                    {loading ? 'ุฌุงุฑู ุงูุชุญุฏูุซ...' : 'ุจุฏุก ุชุญุฏูุซ ุงููุธุงู'}
                </Button>
            </Box>

            {/* ูุชุงุฆุฌ ุงูุชุญุฏูุซ */}
            {updateResult && (
                <Card>
                    <CardContent>
                        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                            {updateResult.success ? (
                                <CheckCircleOutlined color="success" sx={{ mr: 1 }} />
                            ) : (
                                <ErrorOutlined color="error" sx={{ mr: 1 }} />
                            )}
                            <Typography variant="h6">
                                {updateResult.success ? 'ุชู ุงูุชุญุฏูุซ ุจูุฌุงุญ!' : 'ูุดู ุงูุชุญุฏูุซ'}
                            </Typography>
                        </Box>

                        {updateResult.success ? (
                            <>
                                <Alert severity="success" sx={{ mb: 3 }}>
                                    {updateResult.message}
                                </Alert>

                                {/* ุฅุญุตุงุฆูุงุช ุงูุชุญุฏูุซ */}
                                <Typography variant="h6" gutterBottom>
                                    ๐ ุฅุญุตุงุฆูุงุช ุงูุชุญุฏูุซ
                                </Typography>
                                <Grid container spacing={2} sx={{ mb: 3 }}>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <Chip
                                            label={`${updateResult.statistics.processedInvoices} ูุงุชูุฑุฉ ูุนุงูุฌุฉ`}
                                            color="primary"
                                            variant="outlined"
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <Chip
                                            label={`${updateResult.statistics.totalCommission.toLocaleString()} ุฑูุงู ุนูููุฉ`}
                                            color="success"
                                            variant="outlined"
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <Chip
                                            label={`${updateResult.statistics.averageCommission.toFixed(2)} ูุชูุณุท ุงูุนูููุฉ`}
                                            color="info"
                                            variant="outlined"
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6} md={3}>
                                        <Chip
                                            label={`${updateResult.statistics.remainingInvoices} ูุงุชูุฑุฉ ูุชุจููุฉ`}
                                            color="warning"
                                            variant="outlined"
                                        />
                                    </Grid>
                                </Grid>

                                {/* ุชูุงุตูู ุงูุชุญุฏูุซ */}
                                {updateResult.details && updateResult.details.length > 0 && (
                                    <>
                                        <Typography variant="h6" gutterBottom>
                                            ๐ ุชูุงุตูู ุงูุชุญุฏูุซ
                                        </Typography>
                                        <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
                                            {updateResult.details.slice(0, 10).map((detail, index) => (
                                                <Box key={index} sx={{ mb: 1, p: 1, border: '1px solid #e0e0e0', borderRadius: 1 }}>
                                                    <Typography variant="body2">
                                                        ูุงุชูุฑุฉ #{detail.invoiceId} - 
                                                        {detail.action === 'updated' ? ' ุชู ุงูุชุญุฏูุซ' : 
                                                         detail.action === 'created' ? ' ุชู ุงูุฅูุดุงุก' : ' ุฎุทุฃ'}
                                                        {detail.commissionAmount && (
                                                            ` - ุนูููุฉ: ${detail.commissionAmount.toLocaleString()} ุฑูุงู`
                                                        )}
                                                    </Typography>
                                                </Box>
                                            ))}
                                            {updateResult.details.length > 10 && (
                                                <Typography variant="body2" color="text.secondary">
                                                    ... ู {updateResult.details.length - 10} ูุงุชูุฑุฉ ุฃุฎุฑู
                                                </Typography>
                                            )}
                                        </Box>
                                    </>
                                )}
                            </>
                        ) : (
                            <Alert severity="error">
                                <Typography variant="body1" gutterBottom>
                                    {updateResult.error}
                                </Typography>
                                {updateResult.details && (
                                    <Typography variant="body2">
                                        ุงูุชูุงุตูู: {updateResult.details}
                                    </Typography>
                                )}
                            </Alert>
                        )}
                    </CardContent>
                </Card>
            )}
        </Box>
    );
};

export default InvoiceSystemManager;
