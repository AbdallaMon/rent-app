#!/usr/bin/env node

console.log(`
๐ ุฃุฏูุงุช ูุญุต ุงูุฌุฏุงูู ุงููุชุงุญุฉ ูู ุงููุดุฑูุน
${'='.repeat(60)}

ูุฏูู ุงูุขู 7 ุฃุฏูุงุช ูุฎุชููุฉ ููุญุต ุงูุฌุฏุงูู:

๐ธ 1. ุงูููุทุฉ ุงูุณุฑูุนุฉ (quick-table-snapshot.js)
   โ ููุฎุต ุณุฑูุน ูุฌููุน ุงูุฌุฏุงูู
   
๐ 2. ุงููุณุชูุดู ุงูุชูุงุนูู (interactive-table-explorer.js)  
   โ ูุญุต ููุตู ููุฌุฏุงูู ุงูุฃุณุงุณูุฉ
   
๐ง 3. ุงููุญุต ุงููุชูุฏู (advanced-table-checker.js)
   โ ุชุญููู ุดุงูู ูุน ุงูููุงุฑุณ ูุงูุนูุงูุงุช
   
โ 4. ูุญุต ุตุญุฉ ุงูุจูุงูุงุช (validate-dashboard-data.js)
   โ ุงุฎุชุจุงุฑ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู Prisma
   
๐ 5. ุงูุชุญููู ุงูุดุงูู (comprehensive-table-analysis.js)
   โ ุชุญููู ูุงูู ููู ุดูุก
   
๐ 6. ูุญุต ุงูุชุฑููุจ ุงูุฃุณุงุณู (check-table-structure.js)
   โ ุนุฑุถ ุชุฑููุจ ุงูุฌุฏุงูู ุงูุฑุฆูุณูุฉ ููุท
   
๐ฐ 7. ูุญุต ุฌุฏุงูู ุงูุฅูุฌุงุฑ (check-rent-payment-tables.js)
   โ ูุญุต ุฌุฏุงูู ุงูุนููุฏ ูุงูุฏูุนุงุช

${'='.repeat(60)}

๐ ููุงุณุชุฎุฏุงู ุงูุณุฑูุน:
   node quick-table-snapshot.js        (ููุทุฉ ุณุฑูุนุฉ)
   node interactive-table-explorer.js  (ูุญุต ุชูุงุนูู)
   node validate-dashboard-data.js     (ูุญุต ุจู Prisma)

๐ ูููุฒูุฏ ูู ุงูุชูุงุตูู:
   ุงูุฑุฃ ููู TABLE_INSPECTION_GUIDE.md

${'='.repeat(60)}

โจ ูุตุงุฆุญ ูููุฏุฉ:
โข ุชุฃูุฏ ูู ุชุดุบูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุจู ุฃู ูุญุต
โข ุฌููุน ุงูุฃุฏูุงุช ุขููุฉ (ูุฑุงุกุฉ ููุท)
โข ุฅุฐุง ูุงุฌูุช ุฃุฎุทุงุกุ ุชุญูู ูู ููู .env
โข ุงูุจูุงูุงุช ููุฌูุฏุฉ ูุงูุฌุฏุงูู ุณูููุฉ! ๐

`);

// ูุนูููุงุช ุณุฑูุนุฉ ุนู ุญุงูุฉ ุงูุฌุฏุงูู
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function quickStatus() {
  try {
    console.log('๐ ุญุงูุฉ ุณุฑูุนุฉ ููุฌุฏุงูู ุงูุฃุณุงุณูุฉ:\n');
    
    const tables = [
      { name: 'ReminderSettings', emoji: '๐' },
      { name: 'WhatsappMessageLog', emoji: '๐ฑ' },
      { name: 'Complaint', emoji: '๐ข' },
      { name: 'MaintenanceRequest', emoji: '๐ง' },
      { name: 'Client', emoji: '๐ฅ' },
      { name: 'RentAgreement', emoji: '๐' },
      { name: 'Payment', emoji: '๐ฐ' }
    ];    for (const table of tables) {
      try {
        const countQuery = `SELECT COUNT(*) as count FROM \`${table.name}\``;
        const result = await prisma.$queryRawUnsafe(countQuery);
        const count = result[0].count;
        console.log(`   ${table.emoji} ${table.name}: ${count} ุณุฌู`);
      } catch (error) {
        console.log(`   โ ${table.name}: ุฎุทุฃ (${error.message.substring(0, 30)}...)`);
      }
    }
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงููุญุต ุงูุณุฑูุน:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

quickStatus();
