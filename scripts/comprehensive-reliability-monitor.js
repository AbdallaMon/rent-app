/**
 * ๐ก๏ธ ูุธุงู ุงููุฑุงูุจุฉ ูุงูุถูุงู ุงูุดุงูู ููุชุฐููุฑุงุช
 * ๐ ูุถูู ุฅุฑุณุงู ุงูุชุฐููุฑุงุช ูู ุงูููุช ุงููุญุฏุฏ ููุฑุงูุจ ุงูุฃุฏุงุก
 * ๐ ููุจู ูู ุญุงูุฉ ุญุฏูุซ ูุดุงูู ููููุฑ ุชูุงุฑูุฑ ููุตูุฉ
 * ๐ ูุชุนุงูู ูุน ุงูุฃุฎุทุงุก ููุนูุฏ ุงููุญุงููุฉ ุชููุงุฆูุงู
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
require('dotenv').config();

// ๐ ุฅุนุฏุงุฏุงุช ูุธุงู ุงููุฑุงูุจุฉ
const MONITOR_CONFIG = {
    // ูุชุฑุงุช ุงููุฑุงูุจุฉ (ุจุงูุฏูุงุฆู)
    checkIntervals: {
        critical: 5,    // ูุญุต ุญุฑุฌ ูู 5 ุฏูุงุฆู
        normal: 15,     // ูุญุต ุนุงุฏู ูู 15 ุฏูููุฉ
        health: 60      // ูุญุต ุตุญุฉ ุงููุธุงู ูู ุณุงุนุฉ
    },
    
    // ุญุฏูุฏ ุงูุชูุจูู
    alertLimits: {
        maxFailureRate: 5,      // ุฃูุตู ูุณุจุฉ ูุดู 5%
        maxResponseTime: 15000, // ุฃูุตู ุฒูู ุงุณุชุฌุงุจุฉ 15 ุซุงููุฉ
        minSuccessRate: 95,     // ุฃุฏูู ูุณุจุฉ ูุฌุงุญ 95%
        maxPendingReminders: 50 // ุฃูุตู ุนุฏุฏ ุชุฐููุฑุงุช ูุนููุฉ
    },
    
    // ุฅุนุงุฏุฉ ุงููุญุงููุฉ
    retryConfig: {
        maxAttempts: 5,
        baseDelay: 1000,        // ุซุงููุฉ ูุงุญุฏุฉ
        maxDelay: 30000         // 30 ุซุงููุฉ ูุญุฏ ุฃูุตู
    }
};

/**
 * ๐ ุฅูุดุงุก ุฌุฏุงูู ุงููุฑุงูุจุฉ ุงููุทููุจุฉ
 */
async function createMonitoringTables() {
    try {
        console.log('๐ง ุฅูุดุงุก ุฌุฏุงูู ุงููุฑุงูุจุฉ...');
        
        // ุฌุฏูู ูุฑุงูุจุฉ ุงูุฃุฏุงุก ุงูุนุงู
        await prisma.$executeRaw`
            CREATE TABLE IF NOT EXISTS SystemPerformanceLog (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                operation TEXT NOT NULL,
                duration INTEGER NOT NULL,
                status TEXT NOT NULL,
                details TEXT,
                systemLoad REAL,
                memoryUsage INTEGER,
                pendingReminders INTEGER DEFAULT 0,
                successRate REAL DEFAULT 0
            )
        `;
        
        // ุฌุฏูู ุงูุชูุจููุงุช ูุงูุฅูุฐุงุฑุงุช
        await prisma.$executeRaw`
            CREATE TABLE IF NOT EXISTS SystemAlerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                alertType TEXT NOT NULL,
                severity TEXT NOT NULL,
                message TEXT NOT NULL,
                details TEXT,
                resolved BOOLEAN DEFAULT FALSE,
                resolvedAt DATETIME,
                actionTaken TEXT
            )
        `;
        
        // ุฌุฏูู ุฅุญุตุงุฆูุงุช ุงูุชุฐููุฑุงุช ุงูููููุฉ
        await prisma.$executeRaw`
            CREATE TABLE IF NOT EXISTS DailyReminderStats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date DATE NOT NULL UNIQUE,
                totalReminders INTEGER DEFAULT 0,
                successfulReminders INTEGER DEFAULT 0,
                failedReminders INTEGER DEFAULT 0,
                paymentReminders INTEGER DEFAULT 0,
                contractReminders INTEGER DEFAULT 0,
                avgResponseTime REAL DEFAULT 0,
                systemUptime REAL DEFAULT 0,
                notes TEXT
            )
        `;
        
        // ุฌุฏูู ุณุฌู ุงูุนูููุงุช ุงูููุตู
        await prisma.$executeRaw`
            CREATE TABLE IF NOT EXISTS OperationLog (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                operationType TEXT NOT NULL,
                subOperation TEXT,
                startTime DATETIME,
                endTime DATETIME,
                duration INTEGER,
                status TEXT NOT NULL,
                input TEXT,
                output TEXT,
                errorMessage TEXT,
                retryCount INTEGER DEFAULT 0,
                processId TEXT
            )
        `;
        
        console.log('โ ุชู ุฅูุดุงุก ุฌุฏุงูู ุงููุฑุงูุจุฉ ุจูุฌุงุญ');
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุฌุฏุงูู ุงููุฑุงูุจุฉ:', error);
        throw error;
    }
}

/**
 * ๐ ูุญุต ุดุงูู ูุญุงูุฉ ุงููุธุงู
 */
async function performSystemHealthCheck() {
    const startTime = Date.now();
    const checkId = `health_${Date.now()}`;
    
    try {
        console.log('๐ฅ ุจุฏุก ุงููุญุต ุงูุดุงูู ูุตุญุฉ ุงููุธุงู...');
        
        // 1. ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช
        const dbHealth = await checkDatabaseHealth();
        
        // 2. ูุญุต ุงูุชุฐููุฑุงุช ุงููุนููุฉ
        const pendingReminders = await checkPendingReminders();
        
        // 3. ูุญุต ูุนุฏู ุงููุฌุงุญ ุงูุฃุฎูุฑ
        const recentPerformance = await checkRecentPerformance();
        
        // 4. ูุญุต ุงุณุชุฎุฏุงู ุงูุฐุงูุฑุฉ ูุงููุธุงู
        const systemResources = await checkSystemResources();
        
        // 5. ูุญุต ุขุฎุฑ ุชุดุบูู ููุชุฐููุฑุงุช
        const lastExecution = await checkLastExecution();
        
        const duration = Date.now() - startTime;
        
        const healthReport = {
            timestamp: new Date().toISOString(),
            duration,
            database: dbHealth,
            pendingReminders,
            performance: recentPerformance,
            system: systemResources,
            lastExecution,
            overallStatus: 'healthy' // ุณูุชู ุชุญุฏูุซู ุญุณุจ ุงููุชุงุฆุฌ
        };
        
        // ุชุญุฏูุฏ ุงูุญุงูุฉ ุงูุนุงูุฉ
        healthReport.overallStatus = determineOverallHealth(healthReport);
        
        // ุชุณุฌูู ุงููุชุงุฆุฌ
        await logPerformanceData('health_check', duration, 'completed', JSON.stringify(healthReport));
        
        // ุฅุฑุณุงู ุชูุจููุงุช ุฅุฐุง ูุฒู ุงูุฃูุฑ
        await checkForAlerts(healthReport);
        
        console.log(`โ ุงูุชูู ุงููุญุต ุงูุตุญู ูู ${duration}ms - ุงูุญุงูุฉ: ${healthReport.overallStatus}`);
        
        return healthReport;
        
    } catch (error) {
        const duration = Date.now() - startTime;
        await logPerformanceData('health_check', duration, 'failed', error.message);
        
        console.error('โ ุฎุทุฃ ูู ุงููุญุต ุงูุตุญู:', error);
        
        // ุฅุฑุณุงู ุชูุจูู ูุดู ุงููุญุต
        await createAlert('health_check_failed', 'critical', 'ูุดู ูู ูุญุต ุตุญุฉ ุงููุธุงู', error.message);
        
        throw error;
    }
}

/**
 * ๐พ ูุญุต ุตุญุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
 */
async function checkDatabaseHealth() {
    try {
        const startTime = Date.now();
        
        // ูุญุต ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
        await prisma.$queryRaw`SELECT 1`;
        
        // ูุญุต ุงูุฌุฏุงูู ุงูุฃุณุงุณูุฉ
        const tables = await prisma.$queryRaw`
            SELECT name FROM sqlite_master WHERE type='table'
        `;
        
        // ูุญุต ุขุฎุฑ ุนูููุงุช ุงููุชุงุจุฉ
        const lastActivity = await prisma.whatsappMessageLog.findFirst({
            orderBy: { id: 'desc' }
        });
        
        const responseTime = Date.now() - startTime;
        
        return {
            connected: true,
            responseTime,
            tableCount: tables.length,
            lastActivity: lastActivity?.sentAt || null,
            status: responseTime < 1000 ? 'excellent' : responseTime < 3000 ? 'good' : 'slow'
        };
        
    } catch (error) {
        return {
            connected: false,
            error: error.message,
            status: 'failed'
        };
    }
}

/**
 * โณ ูุญุต ุงูุชุฐููุฑุงุช ุงููุนููุฉ
 */
async function checkPendingReminders() {
    try {
        // ูุญุต ุงูุชุฐููุฑุงุช ุงููุนููุฉ ุงูุญุงููุฉ
        const pendingCount = await prisma.$queryRaw`
            SELECT COUNT(*) as count FROM ScheduledReminders 
            WHERE status = 'pending'
        `;
        
        // ูุญุต ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ
        const overdueCount = await prisma.$queryRaw`
            SELECT COUNT(*) as count FROM ScheduledReminders 
            WHERE status = 'pending' 
            AND targetDate < datetime('now')
        `;
        
        // ูุญุต ุงูุชุฐููุฑุงุช ุงูููุฌุฏููุฉ ููููู
        const todayCount = await prisma.$queryRaw`
            SELECT COUNT(*) as count FROM ScheduledReminders 
            WHERE status = 'pending' 
            AND date(targetDate) = date('now')
        `;
        
        const pending = pendingCount[0].count;
        const overdue = overdueCount[0].count;
        const today = todayCount[0].count;
        
        return {
            pending,
            overdue,
            today,
            status: overdue > 0 ? 'critical' : pending > MONITOR_CONFIG.alertLimits.maxPendingReminders ? 'warning' : 'normal'
        };
        
    } catch (error) {
        console.error('ุฎุทุฃ ูู ูุญุต ุงูุชุฐููุฑุงุช ุงููุนููุฉ:', error);
        return {
            pending: -1,
            overdue: -1,
            today: -1,
            status: 'error',
            error: error.message
        };
    }
}

/**
 * ๐ ูุญุต ุงูุฃุฏุงุก ุงูุฃุฎูุฑ
 */
async function checkRecentPerformance() {
    try {
        const oneDayAgo = new Date();
        oneDayAgo.setDate(oneDayAgo.getDate() - 1);
        
        // ุฅุญุตุงุฆูุงุช ุขุฎุฑ 24 ุณุงุนุฉ
        const recentMessages = await prisma.whatsappMessageLog.findMany({
            where: {
                sentAt: {
                    gte: oneDayAgo
                }
            }
        });
        
        const total = recentMessages.length;
        const successful = recentMessages.filter(m => m.status === 'sent').length;
        const failed = recentMessages.filter(m => m.status === 'failed').length;
        
        const successRate = total > 0 ? (successful / total * 100) : 100;
        
        // ูุชูุณุท ุฒูู ุงูุงุณุชุฌุงุจุฉ
        const avgResponseTime = recentMessages.length > 0 
            ? recentMessages.reduce((sum, m) => sum + (m.responseTime || 0), 0) / recentMessages.length 
            : 0;
        
        return {
            period: '24h',
            total,
            successful,
            failed,
            successRate: Math.round(successRate * 100) / 100,
            avgResponseTime: Math.round(avgResponseTime),
            status: successRate >= MONITOR_CONFIG.alertLimits.minSuccessRate ? 'good' : 'poor'
        };
        
    } catch (error) {
        console.error('ุฎุทุฃ ูู ูุญุต ุงูุฃุฏุงุก ุงูุฃุฎูุฑ:', error);
        return {
            period: '24h',
            total: -1,
            status: 'error',
            error: error.message
        };
    }
}

/**
 * ๐ป ูุญุต ููุงุฑุฏ ุงููุธุงู
 */
async function checkSystemResources() {
    try {
        const memoryUsage = process.memoryUsage();
        const uptime = process.uptime();
        
        return {
            memoryUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024), // MB
            memoryTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024), // MB
            uptime: Math.round(uptime / 3600), // ุณุงุนุงุช
            pid: process.pid,
            nodeVersion: process.version,
            status: memoryUsage.heapUsed / memoryUsage.heapTotal > 0.9 ? 'high' : 'normal'
        };
        
    } catch (error) {
        return {
            status: 'error',
            error: error.message
        };
    }
}

/**
 * ๐ ูุญุต ุขุฎุฑ ุชุดุบูู ููุชุฐููุฑุงุช
 */
async function checkLastExecution() {
    try {
        // ุงูุจุญุซ ุนู ุขุฎุฑ ุชุดุบูู ูุงุฌุญ ููุชุฐููุฑุงุช
        const lastExecution = await prisma.$queryRaw`
            SELECT MAX(timestamp) as lastRun
            FROM SystemPerformanceLog 
            WHERE operation = 'reminder_job' AND status = 'completed'
        `;
        
        const lastRun = lastExecution[0]?.lastRun;
        
        if (!lastRun) {
            return {
                lastRun: null,
                timeSince: null,
                status: 'no_data'
            };
        }
        
        const timeSince = Date.now() - new Date(lastRun).getTime();
        const hoursSince = Math.round(timeSince / (1000 * 60 * 60));
        
        return {
            lastRun,
            timeSince,
            hoursSince,
            status: hoursSince > 25 ? 'overdue' : hoursSince > 12 ? 'warning' : 'normal'
        };
        
    } catch (error) {
        return {
            status: 'error',
            error: error.message
        };
    }
}

/**
 * ๐ฏ ุชุญุฏูุฏ ุงูุญุงูุฉ ุงูุนุงูุฉ ูููุธุงู
 */
function determineOverallHealth(healthReport) {
    const issues = [];
    
    // ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช
    if (!healthReport.database.connected) {
        issues.push('database_disconnected');
    } else if (healthReport.database.status === 'slow') {
        issues.push('database_slow');
    }
    
    // ูุญุต ุงูุชุฐููุฑุงุช ุงููุนููุฉ
    if (healthReport.pendingReminders.status === 'critical') {
        issues.push('overdue_reminders');
    } else if (healthReport.pendingReminders.status === 'warning') {
        issues.push('high_pending_reminders');
    }
    
    // ูุญุต ุงูุฃุฏุงุก
    if (healthReport.performance.status === 'poor') {
        issues.push('poor_performance');
    }
    
    // ูุญุต ุงูุฐุงูุฑุฉ
    if (healthReport.system.status === 'high') {
        issues.push('high_memory_usage');
    }
    
    // ูุญุต ุขุฎุฑ ุชุดุบูู
    if (healthReport.lastExecution.status === 'overdue') {
        issues.push('missed_execution');
    }
    
    // ุชุญุฏูุฏ ุงูุญุงูุฉ ุงูููุงุฆูุฉ
    if (issues.length === 0) {
        return 'healthy';
    } else if (issues.some(issue => ['database_disconnected', 'overdue_reminders', 'missed_execution'].includes(issue))) {
        return 'critical';
    } else if (issues.length > 2) {
        return 'warning';
    } else {
        return 'minor_issues';
    }
}

/**
 * ๐จ ูุญุต ูุฅุฑุณุงู ุงูุชูุจููุงุช
 */
async function checkForAlerts(healthReport) {
    try {
        const alerts = [];
        
        // ุชูุจููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
        if (!healthReport.database.connected) {
            alerts.push({
                type: 'database_connection',
                severity: 'critical',
                message: 'ููุฏุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช',
                details: healthReport.database.error
            });
        }
        
        // ุชูุจููุงุช ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ
        if (healthReport.pendingReminders.overdue > 0) {
            alerts.push({
                type: 'overdue_reminders',
                severity: 'critical',
                message: `ููุฌุฏ ${healthReport.pendingReminders.overdue} ุชุฐููุฑ ูุชุฃุฎุฑ`,
                details: `ุฅุฌูุงูู ุงููุนูู: ${healthReport.pendingReminders.pending}`
            });
        }
        
        // ุชูุจููุงุช ุงูุฃุฏุงุก
        if (healthReport.performance.successRate < MONITOR_CONFIG.alertLimits.minSuccessRate) {
            alerts.push({
                type: 'low_success_rate',
                severity: 'warning',
                message: `ูุนุฏู ุงููุฌุงุญ ููุฎูุถ: ${healthReport.performance.successRate}%`,
                details: `ูุดู ${healthReport.performance.failed} ูู ${healthReport.performance.total} ุฑุณุงูุฉ`
            });
        }
        
        // ุชูุจููุงุช ุงูุชุดุบูู
        if (healthReport.lastExecution.status === 'overdue') {
            alerts.push({
                type: 'missed_execution',
                severity: 'critical',
                message: `ูู ูุชู ุชุดุบูู ุงูุชุฐููุฑุงุช ููุฐ ${healthReport.lastExecution.hoursSince} ุณุงุนุฉ`,
                details: `ุขุฎุฑ ุชุดุบูู: ${healthReport.lastExecution.lastRun}`
            });
        }
        
        // ุฅูุดุงุก ุงูุชูุจููุงุช
        for (const alert of alerts) {
            await createAlert(alert.type, alert.severity, alert.message, alert.details);
        }
        
        if (alerts.length > 0) {
            console.log(`๐จ ุชู ุฅูุดุงุก ${alerts.length} ุชูุจูู ุฌุฏูุฏ`);
        }
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ูุญุต ุงูุชูุจููุงุช:', error);
    }
}

/**
 * ๐ ุฅูุดุงุก ุชูุจูู ุฌุฏูุฏ
 */
async function createAlert(alertType, severity, message, details = null) {
    try {
        await prisma.$executeRaw`
            INSERT INTO SystemAlerts (alertType, severity, message, details)
            VALUES (${alertType}, ${severity}, ${message}, ${details})
        `;
        
        console.log(`๐จ [${severity.toUpperCase()}] ${message}`);
        
        // ูููู ุฅุถุงูุฉ ุฅุฑุณุงู ุชูุจููุงุช ุนุจุฑ ูุงุชุณุงุจ ุฃู ุงูููู ูููุณุคูููู ููุง
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุชูุจูู:', error);
    }
}

/**
 * ๐ ุชุณุฌูู ุจูุงูุงุช ุงูุฃุฏุงุก
 */
async function logPerformanceData(operation, duration, status, details = null) {
    try {
        const systemLoad = process.cpuUsage();
        const memoryUsage = Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
        
        // ูุญุต ุนุฏุฏ ุงูุชุฐููุฑุงุช ุงููุนููุฉ
        const pendingReminders = await prisma.$queryRaw`
            SELECT COUNT(*) as count FROM ScheduledReminders 
            WHERE status = 'pending'
        `;
        
        await prisma.$executeRaw`
            INSERT INTO SystemPerformanceLog 
            (operation, duration, status, details, systemLoad, memoryUsage, pendingReminders)
            VALUES (${operation}, ${duration}, ${status}, ${details}, ${0}, ${memoryUsage}, ${pendingReminders[0].count})
        `;
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชุณุฌูู ุจูุงูุงุช ุงูุฃุฏุงุก:', error);
    }
}

/**
 * ๐ ุฅูุดุงุก ุชูุฑูุฑ ูููู ุดุงูู
 */
async function generateDailyReport() {
    try {
        console.log('๐ ุฅูุดุงุก ุงูุชูุฑูุฑ ุงููููู ุงูุดุงูู...');
        
        const today = new Date();
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        yesterday.setHours(0, 0, 0, 0);
        
        const todayStart = new Date(today);
        todayStart.setHours(0, 0, 0, 0);
        
        // ุฅุญุตุงุฆูุงุช ุงูุชุฐููุฑุงุช
        const reminderStats = await prisma.whatsappMessageLog.findMany({
            where: {
                sentAt: {
                    gte: yesterday,
                    lt: todayStart
                }
            }
        });
        
        // ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก
        const performanceStats = await prisma.$queryRaw`
            SELECT 
                COUNT(*) as totalOperations,
                AVG(duration) as avgDuration,
                SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as successful,
                SUM(CASE WHEN status = 'failed' THEN 1 ELSE 0 END) as failed
            FROM SystemPerformanceLog
            WHERE timestamp >= ${yesterday.toISOString()} AND timestamp < ${todayStart.toISOString()}
        `;
        
        // ุฅุญุตุงุฆูุงุช ุงูุชูุจููุงุช
        const alertStats = await prisma.$queryRaw`
            SELECT 
                COUNT(*) as totalAlerts,
                SUM(CASE WHEN severity = 'critical' THEN 1 ELSE 0 END) as critical,
                SUM(CASE WHEN severity = 'warning' THEN 1 ELSE 0 END) as warnings
            FROM SystemAlerts
            WHERE timestamp >= ${yesterday.toISOString()} AND timestamp < ${todayStart.toISOString()}
        `;
        
        const totalReminders = reminderStats.length;
        const successfulReminders = reminderStats.filter(r => r.status === 'sent').length;
        const failedReminders = totalReminders - successfulReminders;
        const successRate = totalReminders > 0 ? (successfulReminders / totalReminders * 100) : 100;
        
        const paymentReminders = reminderStats.filter(r => r.messageType === 'payment_reminder').length;
        const contractReminders = reminderStats.filter(r => r.messageType === 'contract_expiry_reminder').length;
        
        const avgResponseTime = reminderStats.length > 0 
            ? reminderStats.reduce((sum, r) => sum + (r.responseTime || 0), 0) / reminderStats.length 
            : 0;
        
        const report = {
            date: yesterday.toDateString(),
            period: 'ูููู',
            reminders: {
                total: totalReminders,
                successful: successfulReminders,
                failed: failedReminders,
                successRate: Math.round(successRate * 100) / 100,
                payment: paymentReminders,
                contract: contractReminders,
                avgResponseTime: Math.round(avgResponseTime)
            },
            performance: {
                totalOperations: performanceStats[0]?.totalOperations || 0,
                avgDuration: Math.round(performanceStats[0]?.avgDuration || 0),
                successful: performanceStats[0]?.successful || 0,
                failed: performanceStats[0]?.failed || 0
            },
            alerts: {
                total: alertStats[0]?.totalAlerts || 0,
                critical: alertStats[0]?.critical || 0,
                warnings: alertStats[0]?.warnings || 0
            },
            systemHealth: await checkSystemResources(),
            timestamp: new Date().toISOString()
        };
        
        // ุญูุธ ุงูุฅุญุตุงุฆูุงุช ุงูููููุฉ
        await prisma.$executeRaw`
            INSERT OR REPLACE INTO DailyReminderStats 
            (date, totalReminders, successfulReminders, failedReminders, 
             paymentReminders, contractReminders, avgResponseTime)
            VALUES (${yesterday.toISOString().split('T')[0]}, ${totalReminders}, 
                    ${successfulReminders}, ${failedReminders}, ${paymentReminders}, 
                    ${contractReminders}, ${avgResponseTime})
        `;
        
        // ุญูุธ ุงูุชูุฑูุฑ ูููู
        const reportJson = JSON.stringify(report, null, 2);
        const fs = require('fs');
        const fileName = `comprehensive-daily-report-${yesterday.toISOString().split('T')[0]}.json`;
        fs.writeFileSync(fileName, reportJson, 'utf8');
        
        console.log(`๐ ุชู ุฅูุดุงุก ุงูุชูุฑูุฑ ุงููููู: ${fileName}`);
        console.log(`๐ ุงูููุฎุต: ${totalReminders} ุชุฐููุฑุ ูุฌุญ ${successfulReminders}ุ ูุดู ${failedReminders} (${Math.round(successRate)}%)`);
        
        return report;
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุชูุฑูุฑ ุงููููู:', error);
        throw error;
    }
}

/**
 * ๐ ุชุดุบูู ุฏูุฑุฉ ูุฑุงูุจุฉ ุดุงููุฉ
 */
async function runComprehensiveMonitoring() {
    const startTime = Date.now();
    
    try {
        console.log('๐ ุจุฏุก ุฏูุฑุฉ ุงููุฑุงูุจุฉ ุงูุดุงููุฉ...');
        
        // ุฅูุดุงุก ุงูุฌุฏุงูู ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
        await createMonitoringTables();
        
        // ุชุดุบูู ูุญุต ุตุญุฉ ุงููุธุงู
        const healthReport = await performSystemHealthCheck();
        
        // ูุญุต ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ ูุชุดุบูููุง
        await processOverdueReminders();
        
        // ุชูุธูู ุงูุจูุงูุงุช ุงููุฏููุฉ
        await cleanupOldData();
        
        const duration = Date.now() - startTime;
        
        console.log(`โ ุงูุชููุช ุฏูุฑุฉ ุงููุฑุงูุจุฉ ูู ${duration}ms`);
        console.log(`๐ฅ ุญุงูุฉ ุงููุธุงู: ${healthReport.overallStatus}`);
        
        return {
            success: true,
            duration,
            healthStatus: healthReport.overallStatus,
            timestamp: new Date().toISOString()
        };
        
    } catch (error) {
        const duration = Date.now() - startTime;
        
        console.error('โ ุฎุทุฃ ูู ุฏูุฑุฉ ุงููุฑุงูุจุฉ:', error);
        
        await createAlert('monitoring_failed', 'critical', 'ูุดู ูู ุฏูุฑุฉ ุงููุฑุงูุจุฉ', error.message);
        
        return {
            success: false,
            duration,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

/**
 * โก ูุนุงูุฌุฉ ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ
 */
async function processOverdueReminders() {
    try {
        console.log('โก ูุญุต ููุนุงูุฌุฉ ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ...');
        
        // ุงูุจุญุซ ุนู ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ
        const overdueReminders = await prisma.$queryRaw`
            SELECT * FROM ScheduledReminders 
            WHERE status = 'pending' 
            AND targetDate < datetime('now')
            ORDER BY priority DESC, targetDate ASC
            LIMIT 20
        `;
        
        if (overdueReminders.length === 0) {
            console.log('โ ูุง ุชูุฌุฏ ุชุฐููุฑุงุช ูุชุฃุฎุฑุฉ');
            return { processed: 0 };
        }
        
        console.log(`๐ ูุนุงูุฌุฉ ${overdueReminders.length} ุชุฐููุฑ ูุชุฃุฎุฑ`);
        
        // ุชุดุบูู ูุธุงู ุงููุนุงูุฌุฉ ุงูููุซูู
        const { runReliabilitySystem } = require('./reminder-reliability-system');
        const result = await runReliabilitySystem();
        
        return result;
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุชุฐููุฑุงุช ุงููุชุฃุฎุฑุฉ:', error);
        throw error;
    }
}

/**
 * ๐งน ุชูุธูู ุงูุจูุงูุงุช ุงููุฏููุฉ
 */
async function cleanupOldData() {
    try {
        console.log('๐งน ุชูุธูู ุงูุจูุงูุงุช ุงููุฏููุฉ...');
        
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        
        // ุญุฐู ุณุฌูุงุช ุงูุฃุฏุงุก ุงููุฏููุฉ
        const deletedPerformance = await prisma.$executeRaw`
            DELETE FROM SystemPerformanceLog 
            WHERE timestamp < ${thirtyDaysAgo.toISOString()}
        `;
        
        // ุญุฐู ุงูุชูุจููุงุช ุงููุญูููุฉ ุงููุฏููุฉ
        const deletedAlerts = await prisma.$executeRaw`
            DELETE FROM SystemAlerts 
            WHERE resolved = TRUE 
            AND timestamp < ${thirtyDaysAgo.toISOString()}
        `;
        
        // ุญุฐู ุณุฌูุงุช ุงูุนูููุงุช ุงููุฏููุฉ
        const deletedOperations = await prisma.$executeRaw`
            DELETE FROM OperationLog 
            WHERE timestamp < ${thirtyDaysAgo.toISOString()}
        `;
        
        console.log(`๐๏ธ ุชู ุญุฐู ${deletedPerformance} ุณุฌู ุฃุฏุงุกุ ${deletedAlerts} ุชูุจููุ ${deletedOperations} ุนูููุฉ`);
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชูุธูู ุงูุจูุงูุงุช:', error);
        // ูุง ูุฑูุฏ ุฃู ูููู ุฎุทุฃ ุงูุชูุธูู ุฏูุฑุฉ ุงููุฑุงูุจุฉ
    }
}

/**
 * ๐ฏ ุชุดุบูู ุงููุธุงู ุงูุดุงูู
 */
async function startComprehensiveReliabilitySystem() {
    try {
        console.log('๐ก๏ธ ุจุฏุก ูุธุงู ุงูุถูุงู ูุงููุฑุงูุจุฉ ุงูุดุงูู ููุชุฐููุฑุงุช');
        console.log(`โฐ ุงูููุช: ${new Date().toLocaleString('ar-SA')}`);
        console.log('=====================================');
        
        // ุชุดุบูู ุฏูุฑุฉ ุฃูููุฉ
        const initialResult = await runComprehensiveMonitoring();
        
        if (initialResult.success) {
            console.log('โ ุชู ุชุดุบูู ุงููุธุงู ุจูุฌุงุญ');
            console.log(`๐ฅ ุญุงูุฉ ุงููุธุงู: ${initialResult.healthStatus}`);
        } else {
            console.error('โ ูุดู ูู ุงูุชุดุบูู ุงูุฃููู:', initialResult.error);
        }
        
        console.log('\n๐ ุงููุธุงู ุงูุขู ูุฑุงูุจ:');
        console.log('  โข ุงูุชุฐููุฑุงุช ุงููุนููุฉ ูุงููุชุฃุฎุฑุฉ');
        console.log('  โข ุฃุฏุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช');
        console.log('  โข ูุนุฏูุงุช ุงููุฌุงุญ ูุงููุดู');
        console.log('  โข ุงุณุชุฎุฏุงู ููุงุฑุฏ ุงููุธุงู');
        console.log('  โข ุงูุชูุจููุงุช ูุงูุฅูุฐุงุฑุงุช');
        
        return initialResult;
        
    } catch (error) {
        console.error('๐ฅ ุฎุทุฃ ุญุฑุฌ ูู ุจุฏุก ุงููุธุงู:', error);
        process.exit(1);
    }
}

// ุชุดุบูู ุงููุธุงู ุฅุฐุง ุชู ุงุณุชุฏุนุงุก ุงูููู ูุจุงุดุฑุฉ
if (require.main === module) {
    startComprehensiveReliabilitySystem()
        .then(() => {
            console.log('\n๐ ูุธุงู ุงููุฑุงูุจุฉ ุงูุดุงูู ุฌุงูุฒ!');
            console.log('๐ก ููููู ุงูุขู ูุฑุงูุจุฉ ุงูุฃุฏุงุก ูู ุฎูุงู ุฌุฏุงูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
        })
        .catch(error => {
            console.error('๐ฅ ูุดู ูู ุชุดุบูู ุงููุธุงู:', error);
            process.exit(1);
        });
}

module.exports = {
    runComprehensiveMonitoring,
    performSystemHealthCheck,
    generateDailyReport,
    createMonitoringTables,
    checkPendingReminders,
    processOverdueReminders,
    MONITOR_CONFIG
};
